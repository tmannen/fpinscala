Pure function: a function that lacks side effects.

referencial transparency: basically that you can replace an expression with the value it gets when given a parameter. Not referentially transparent:

scala> val x = new StringBuilder("Hello")
x: java.lang.StringBuilder = Hello
scala> val y = x.append(", World")
y: java.lang.StringBuilder = Hello, World
scala> val r1 = y.toString
r1: java.lang.String = Hello, World
scala> val r2 = y.toString
r2: java.lang.String = Hello, World

scala> val x = new StringBuilder("Hello")
x: java.lang.StringBuilder = Hello
scala> val r1 = x.append(", World").toString
r1: java.lang.String = Hello, World
scala> val r2 = x.append(", World").toString
r2: java.lang.String = Hello, World, World

RT:

scala> val x = "Hello, World"
x: java.lang.String = Hello, World
scala> val r1 = x.reverse
r1: String = dlroW ,olleH
scala> val r2 = x.reverse
r2: String = dlroW ,olleH

Suppose we replace all occurrences of the term x with the expression referenced by x
(its definition), as follows:

scala> val r1 = "Hello, World".reverse
r1: String = dlroW ,olleH
scala> val r2 = "Hello, World".reverse
r2: String = dlroW ,olleH